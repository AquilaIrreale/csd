.macro INT_NOERR n
    .global isr\n
    isr\n:
        pushl $0
        pushl $\n
        jmp isr_common
.endm

.macro INT_ERRNO n
    .global isr\n
    isr\n:
        pushl $\n
        jmp isr_common
.endm

.section .text

/* Hardware exceptions */
INT_NOERR   0
INT_NOERR   1
INT_NOERR   2
INT_NOERR   3
INT_NOERR   4
INT_NOERR   5
INT_NOERR   6
INT_NOERR   7
INT_ERRNO   8
INT_NOERR   9
INT_ERRNO  10
INT_ERRNO  11
INT_ERRNO  12
INT_ERRNO  13
INT_ERRNO  14
INT_NOERR  15
INT_NOERR  16
INT_ERRNO  17
INT_NOERR  18
INT_NOERR  19
INT_NOERR  20
INT_NOERR  21
INT_NOERR  22
INT_NOERR  23
INT_NOERR  24
INT_NOERR  25
INT_NOERR  26
INT_NOERR  27
INT_NOERR  28
INT_NOERR  29
INT_ERRNO  30
INT_NOERR  31

/* IRQs (32=IRQ0, 47=IRQ15)*/
INT_NOERR  32
INT_NOERR  33
INT_NOERR  34
INT_NOERR  35
INT_NOERR  36
INT_NOERR  37
INT_NOERR  38
INT_NOERR  39
INT_NOERR  40
INT_NOERR  41
INT_NOERR  42
INT_NOERR  43
INT_NOERR  44
INT_NOERR  45
INT_NOERR  46
INT_NOERR  47

/* Other interrupts (128 = 0x80 = syscall)*/
INT_NOERR  48
INT_NOERR  49
INT_NOERR  50
INT_NOERR  51
INT_NOERR  52
INT_NOERR  53
INT_NOERR  54
INT_NOERR  55
INT_NOERR  56
INT_NOERR  57
INT_NOERR  58
INT_NOERR  59
INT_NOERR  60
INT_NOERR  61
INT_NOERR  62
INT_NOERR  63
INT_NOERR  64
INT_NOERR  65
INT_NOERR  66
INT_NOERR  67
INT_NOERR  68
INT_NOERR  69
INT_NOERR  70
INT_NOERR  71
INT_NOERR  72
INT_NOERR  73
INT_NOERR  74
INT_NOERR  75
INT_NOERR  76
INT_NOERR  77
INT_NOERR  78
INT_NOERR  79
INT_NOERR  80
INT_NOERR  81
INT_NOERR  82
INT_NOERR  83
INT_NOERR  84
INT_NOERR  85
INT_NOERR  86
INT_NOERR  87
INT_NOERR  88
INT_NOERR  89
INT_NOERR  90
INT_NOERR  91
INT_NOERR  92
INT_NOERR  93
INT_NOERR  94
INT_NOERR  95
INT_NOERR  96
INT_NOERR  97
INT_NOERR  98
INT_NOERR  99
INT_NOERR 100
INT_NOERR 101
INT_NOERR 102
INT_NOERR 103
INT_NOERR 104
INT_NOERR 105
INT_NOERR 106
INT_NOERR 107
INT_NOERR 108
INT_NOERR 109
INT_NOERR 110
INT_NOERR 111
INT_NOERR 112
INT_NOERR 113
INT_NOERR 114
INT_NOERR 115
INT_NOERR 116
INT_NOERR 117
INT_NOERR 118
INT_NOERR 119
INT_NOERR 120
INT_NOERR 121
INT_NOERR 122
INT_NOERR 123
INT_NOERR 124
INT_NOERR 125
INT_NOERR 126
INT_NOERR 127
INT_NOERR 128 /* System call */
INT_NOERR 129
INT_NOERR 130
INT_NOERR 131
INT_NOERR 132
INT_NOERR 133
INT_NOERR 134
INT_NOERR 135
INT_NOERR 136
INT_NOERR 137
INT_NOERR 138
INT_NOERR 139
INT_NOERR 140
INT_NOERR 141
INT_NOERR 142
INT_NOERR 143
INT_NOERR 144
INT_NOERR 145
INT_NOERR 146
INT_NOERR 147
INT_NOERR 148
INT_NOERR 149
INT_NOERR 150
INT_NOERR 151
INT_NOERR 152
INT_NOERR 153
INT_NOERR 154
INT_NOERR 155
INT_NOERR 156
INT_NOERR 157
INT_NOERR 158
INT_NOERR 159
INT_NOERR 160
INT_NOERR 161
INT_NOERR 162
INT_NOERR 163
INT_NOERR 164
INT_NOERR 165
INT_NOERR 166
INT_NOERR 167
INT_NOERR 168
INT_NOERR 169
INT_NOERR 170
INT_NOERR 171
INT_NOERR 172
INT_NOERR 173
INT_NOERR 174
INT_NOERR 175
INT_NOERR 176
INT_NOERR 177
INT_NOERR 178
INT_NOERR 179
INT_NOERR 180
INT_NOERR 181
INT_NOERR 182
INT_NOERR 183
INT_NOERR 184
INT_NOERR 185
INT_NOERR 186
INT_NOERR 187
INT_NOERR 188
INT_NOERR 189
INT_NOERR 190
INT_NOERR 191
INT_NOERR 192
INT_NOERR 193
INT_NOERR 194
INT_NOERR 195
INT_NOERR 196
INT_NOERR 197
INT_NOERR 198
INT_NOERR 199
INT_NOERR 200
INT_NOERR 201
INT_NOERR 202
INT_NOERR 203
INT_NOERR 204
INT_NOERR 205
INT_NOERR 206
INT_NOERR 207
INT_NOERR 208
INT_NOERR 209
INT_NOERR 210
INT_NOERR 211
INT_NOERR 212
INT_NOERR 213
INT_NOERR 214
INT_NOERR 215
INT_NOERR 216
INT_NOERR 217
INT_NOERR 218
INT_NOERR 219
INT_NOERR 220
INT_NOERR 221
INT_NOERR 222
INT_NOERR 223
INT_NOERR 224
INT_NOERR 225
INT_NOERR 226
INT_NOERR 227
INT_NOERR 228
INT_NOERR 229
INT_NOERR 230
INT_NOERR 231
INT_NOERR 232
INT_NOERR 233
INT_NOERR 234
INT_NOERR 235
INT_NOERR 236
INT_NOERR 237
INT_NOERR 238
INT_NOERR 239
INT_NOERR 240
INT_NOERR 241
INT_NOERR 242
INT_NOERR 243
INT_NOERR 244
INT_NOERR 245
INT_NOERR 246
INT_NOERR 247
INT_NOERR 248
INT_NOERR 249
INT_NOERR 250
INT_NOERR 251
INT_NOERR 252
INT_NOERR 253
INT_NOERR 254
INT_NOERR 255

.global isr0test
isr0test:
	pushl $0
	call isr0testc
	addl $4, %esp
	iret

isr0testc:
	ret

isr_common:
    /* Dump registers */
    pusha
    pushl %ds
    pushl %ss
    pushl %fs
    pushl %es
    pushl %gs
    
    /* Load kernel data segments */
    movw $0x10, %ax
    movw %ax, %ds
    movw %ax, %ss
    movw %ax, %fs
    movw %ax, %es
    movw %ax, %gs

    /* 
     * Load isr number, error code, and
     * a pointer to register dump
     */
    movl %esp, %edi
    movl 52(%esp), %eax
    movl 56(%esp), %edx

    /* Call the interrupt handler manager */
    pushl %edi
    pushl %edx
    pushl %eax
    call isr_handler_manager
    addl $12, %esp

    /* Restore segments */
    popl %gs
    popl %es
    popl %fs
    popl %ss
    popl %ds
    popa

    /* Cleanup stack (remove isr number and error code) */
    addl $8, %esp

    /* End of interrupt */
    iret


