.macro IRQ n
	.global isr_irq\n
	isr_irq\n:
		pushl $0
		pushl $\n+32
		jmp irq_gate
.endm

.macro EXC_ERRCODE n
	.global isr_exception\n
	isr_exception\n:
		pushl $\n
		jmp exc_gate
.endm

.macro EXC_NOERRCODE n
	.global isr_exception\n
	isr_exception\n:
		pushl $0
		pushl $\n
		jmp exc_gate
.endm

.macro INT n
	
.endm

exc_gate:
	# Save registers state
	pusha
	pushl %ds
	pushl %ss
	pushl %fs
	pushl %es
	pushl %gs

	# Load kernel data segments
	movw $0x10, %ax
	movw %ax, %ds
	movw %ax, %ss
	movw %ax, %fs
	movw %ax, %es
	movw %ax, %gs

	# Retrieve registers backup location,
	# interrupt number and error code
	movl %esp, %edi
	movl 52(%esp), %eax
	movl 56(%esp), %edx

	# Call the interrupt gate
	pushl %edi
	pushl %edx
	pushl %eax
	call interrupt_routines_manager
	addl $12, %esp

	# Restore registers state
	popl %gs
	popl %es
	popl %fs
	popl %ss
	popl %ds
	popa

	# Clean stack
	addl $8, %esp

	# Return
	iret


EXC_NOERRCODE 0
EXC_NOERRCODE 1
EXC_NOERRCODE 2
EXC_NOERRCODE 3
EXC_NOERRCODE 4
EXC_NOERRCODE 5
EXC_NOERRCODE 6
EXC_NOERRCODE 7
EXC_NOERRCODE 8
EXC_NOERRCODE 9
EXC_NOERRCODE 10
EXC_NOERRCODE 11
EXC_NOERRCODE 12
EXC_NOERRCODE 13
EXC_NOERRCODE 14
EXC_NOERRCODE 15
EXC_NOERRCODE 16
EXC_NOERRCODE 17
EXC_NOERRCODE 18
EXC_NOERRCODE 19
